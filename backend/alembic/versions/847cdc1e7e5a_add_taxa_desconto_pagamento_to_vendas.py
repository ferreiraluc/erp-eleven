"""add taxa_desconto_pagamento to vendas

Revision ID: 847cdc1e7e5a
Revises: 
Create Date: 2025-08-05 19:41:49.205731

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '847cdc1e7e5a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comissoes')
    op.drop_table('pontos')
    op.drop_table('fechamentos_semanais')
    op.alter_column('pedidos', 'endereco_uf',
               existing_type=sa.CHAR(length=2),
               type_=sa.String(length=2),
               existing_nullable=False)
    # Fix enum casting issues
    op.execute("ALTER TABLE pedidos ALTER COLUMN transportadora TYPE transportadoratipo USING transportadora::text::transportadoratipo")
    op.execute("ALTER TABLE pedidos ALTER COLUMN status TYPE pedidostatus USING status::text::pedidostatus")
    op.execute("ALTER TABLE usuarios ALTER COLUMN role TYPE usuariorole USING CASE WHEN role::text IN ('ADMIN', 'GERENTE', 'VENDEDOR', 'LIMPEZA') THEN role::text::usuariorole ELSE 'VENDEDOR'::usuariorole END")
    op.add_column('vendas', sa.Column('taxa_desconto_pagamento', sa.DECIMAL(precision=5, scale=4), nullable=True))
    op.add_column('vendas', sa.Column('pending_transfer_id', sa.UUID(), nullable=True))
    op.add_column('vendas', sa.Column('requires_thais_transfer', sa.Boolean(), nullable=True))
    op.alter_column('vendas', 'moeda',
               existing_type=postgresql.ENUM('G$', 'R$', 'U$', 'EUR', name='moeda_tipo'),
               type_=sa.Enum('G_DOLLAR', 'R_DOLLAR', 'U_DOLLAR', 'EUR', name='moedatipo'),
               existing_nullable=False)
    op.alter_column('vendas', 'metodo_pagamento',
               existing_type=postgresql.ENUM('DEBITO', 'CREDITO', 'PIX', 'DINHEIRO', 'TRANSFERENCIA', name='pagamento_metodo'),
               type_=sa.Enum('PIX_POWER', 'PIX_THAIS', 'PIX_MERCADO_PAGO', 'CREDITO', 'DEBITO', 'PY_TRANSFER_SUDAMERIS', 'PY_TRANSFER_INTERFISA', name='pagamentometodo'),
               existing_nullable=False)
    op.drop_index('idx_vendas_data', table_name='vendas')
    op.drop_index('idx_vendas_moeda', table_name='vendas')
    op.drop_index('idx_vendas_semana', table_name='vendas')
    op.drop_index('idx_vendas_vendedor', table_name='vendas')
    op.create_foreign_key(None, 'vendas', 'money_transfers', ['pending_transfer_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'vendas', type_='foreignkey')
    op.create_index('idx_vendas_vendedor', 'vendas', ['vendedor_id'], unique=False)
    op.create_index('idx_vendas_semana', 'vendas', ['semana_fechamento'], unique=False)
    op.create_index('idx_vendas_moeda', 'vendas', ['moeda'], unique=False)
    op.create_index('idx_vendas_data', 'vendas', ['data_venda'], unique=False)
    op.alter_column('vendas', 'metodo_pagamento',
               existing_type=sa.Enum('PIX_POWER', 'PIX_THAIS', 'PIX_MERCADO_PAGO', 'CREDITO', 'DEBITO', 'PY_TRANSFER_SUDAMERIS', 'PY_TRANSFER_INTERFISA', name='pagamentometodo'),
               type_=postgresql.ENUM('DEBITO', 'CREDITO', 'PIX', 'DINHEIRO', 'TRANSFERENCIA', name='pagamento_metodo'),
               existing_nullable=False)
    op.alter_column('vendas', 'moeda',
               existing_type=sa.Enum('G_DOLLAR', 'R_DOLLAR', 'U_DOLLAR', 'EUR', name='moedatipo'),
               type_=postgresql.ENUM('G$', 'R$', 'U$', 'EUR', name='moeda_tipo'),
               existing_nullable=False)
    op.drop_column('vendas', 'requires_thais_transfer')
    op.drop_column('vendas', 'pending_transfer_id')
    op.drop_column('vendas', 'taxa_desconto_pagamento')
    op.alter_column('usuarios', 'role',
               existing_type=sa.Enum('ADMIN', 'GERENTE', 'VENDEDOR', 'LIMPEZA', name='usuariorole'),
               type_=postgresql.ENUM('ADMIN', 'GERENTE', 'VENDEDOR', 'FINANCEIRO', 'OPERACIONAL', name='usuario_role'),
               existing_nullable=False,
               existing_server_default=sa.text("'VENDEDOR'::usuario_role"))
    op.alter_column('pedidos', 'status',
               existing_type=sa.Enum('PENDENTE', 'PROCESSANDO', 'ENVIADO', 'ENTREGUE', 'CANCELADO', name='pedidostatus'),
               type_=postgresql.ENUM('PENDENTE', 'PROCESSANDO', 'ENVIADO', 'ENTREGUE', 'CANCELADO', name='pedido_status'),
               existing_nullable=True,
               existing_server_default=sa.text("'PENDENTE'::pedido_status"))
    op.alter_column('pedidos', 'transportadora',
               existing_type=sa.Enum('CORREIOS', 'AZUL_CARGO', 'PARTICULAR', 'SUPERFRETE', name='transportadoratipo'),
               type_=postgresql.ENUM('CORREIOS', 'AZUL_CARGO', 'PARTICULAR', 'SUPERFRETE', name='transportadora_tipo'),
               existing_nullable=False)
    op.alter_column('pedidos', 'endereco_uf',
               existing_type=sa.String(length=2),
               type_=sa.CHAR(length=2),
               existing_nullable=False)
    op.create_table('fechamentos_semanais',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('semana_inicio', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('semana_fim', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('fechado', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('fechado_em', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('fechado_por', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('total_vendas_g', sa.NUMERIC(precision=15, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_vendas_r', sa.NUMERIC(precision=15, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_vendas_u', sa.NUMERIC(precision=15, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_vendas_eur', sa.NUMERIC(precision=15, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['fechado_por'], ['usuarios.id'], name='fechamentos_semanais_fechado_por_fkey'),
    sa.PrimaryKeyConstraint('id', name='fechamentos_semanais_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('pontos',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('funcionario_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('data_ponto', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('entrada_manha', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('saida_almoco', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('entrada_tarde', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('saida_noite', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('horas_trabalhadas', postgresql.INTERVAL(), autoincrement=False, nullable=True),
    sa.Column('horas_extras', postgresql.INTERVAL(), autoincrement=False, nullable=True),
    sa.Column('observacoes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['usuarios.id'], name='pontos_created_by_fkey'),
    sa.ForeignKeyConstraint(['funcionario_id'], ['funcionarios.id'], name='pontos_funcionario_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='pontos_pkey')
    )
    op.create_table('comissoes',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('fechamento_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('vendedor_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('total_g', sa.NUMERIC(precision=15, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_r', sa.NUMERIC(precision=15, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_u', sa.NUMERIC(precision=15, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('total_eur', sa.NUMERIC(precision=15, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('percentual_comissao', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('valor_comissao', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('pago', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('data_pagamento', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['fechamento_id'], ['fechamentos_semanais.id'], name='comissoes_fechamento_id_fkey'),
    sa.ForeignKeyConstraint(['vendedor_id'], ['vendedores.id'], name='comissoes_vendedor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='comissoes_pkey')
    )
    # ### end Alembic commands ###
